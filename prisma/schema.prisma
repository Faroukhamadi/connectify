generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model friendship {
  userId                       Int
  friendId                     Int
  room_id                      Int? @unique
  friend user @relation("friendship_friendTouser", fields: [friendId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_friend")
  user   user @relation("friendship_userTouser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@id([userId, friendId])
  @@unique([userId, friendId], map: "user_friend_unique")
}

model header {
  id                        Int      @id(map: "header_pk") @default(autoincrement())
  senderId                  Int?
  receiverId                Int?
  messageId                 Int?
  status                    String?  @db.VarChar
  from_id                   user?    @relation("header_from_idTouser", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_header_from")
  to_id                     user?    @relation("header_to_idTouser", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_header_to")
  createdAt                 DateTime @default(now())
  message                   message?
}

model message {
  id             Int       @id(map: "message_pk") @default(autoincrement())
  header_id      Int?      @unique
  is_from_sender Boolean?
  content        String?   @db.VarChar
  read           Boolean?
  sent_at        DateTime? @default(now())
  header         header?   @relation(fields: [header_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_header_message_id")
}

model user {
  id                                 Int          @id(map: "user_pk") @default(autoincrement())
  username                           String       @unique @db.VarChar(100)
  password                           String?      @db.VarChar(50)
  first_name                         String?      @db.VarChar(30)
  last_name                          String?      @db.VarChar(50)
  friendship_friendship_friendTouser friendship[] @relation("friendship_friendTouser")
  friendship_friendship_userTouser   friendship[] @relation("friendship_userTouser")
  header_header_from_idTouser        header[]     @relation("header_from_idTouser")
  header_header_to_idTouser          header[]     @relation("header_to_idTouser")
}
