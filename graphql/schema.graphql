### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Edge {
  cursor: String
  node: User
}

type Friendship {
  friend: User
  room_id: Int
  user: User
}

type Header {
  createdAt: String
  from_id: User
  id: ID
  status: String
  to_id: User
}

type Message {
  content: String
  header: Header
  id: ID
  is_from_sender: Boolean
  read: Boolean
  sent_at: String
  time: String
}

type MessageEdge {
  cursor: String
  node: Message
}

type MessagePageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type MessageResponse {
  edges: [MessageEdge]
  pageInfo: MessagePageInfo
}

type Mutation {
  createAuth0User(first_name: String!, last_name: String!, username: String!): User!
  createHeader(content: String!, isFromSender: Boolean!, read: Boolean!, receiverId: Int!, senderId: Int!, sentAt: String!, status: String!): Header!
  createUser(first_name: String!, last_name: String!, password: String!, username: String!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Query {
  areFriends(friendId: Int!, userId: Int!): Boolean
  friends(userId: Int!): [Friendship]
  friends_last_message_header(userId: Int): [Message!]
  friendshipsTable: [Friendship]
  headers: [Header]
  headers_messages(firstId: Int!, secondId: Int!): [Message]
  last_message_header(firstId: Int!, secondId: Int!): [Message]
  messages(after: Int, first: Int): MessageResponse
  room(friendId: Int!, userId: Int!): Int
  user(id: Int, username: String): User
  users(after: Int, first: Int): Response
}

type Response {
  edges: [Edge]
  pageInfo: PageInfo
}

type User {
  first_name: String
  id: ID
  last_name: String
  password: String
  username: ID
}